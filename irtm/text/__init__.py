# -*- coding: utf-8 -*-
# fmt: off

import irt

from irtm.cli import main
from irtm.text import trainer
from irtm.text import evaluator
from irtm.common import ryaml

import click

import logging

from typing import List


log = logging.getLogger(__name__)


# --- cli interface


@main.group()
def text():
    """
    Open-world knowledge graph completion using free text
    """
    log.info('running text')


@text.command()
@click.option(
    '--dataset', type=str, required=True,
    help='path to irt dataset')
@click.option(
    '--model', type=str, required=True,
    help='one of the huggingface models'
)
def cli(dataset: str, model: str):
    """

    Open an interactive python shell

    dataset: path to text.data.Dataset directory

    """

    dataloader_args = dict(
        shuffle=False,
        num_workers=0,
        batch_size=2,
        subbatch_size=3,
    )

    ids = irt.Dataset(path=dataset)
    kow = irt.KeenOpenWorld(dataset=ids)

    tdm = irt.TorchModule(
        kow=kow,
        model_name=model,
        dataloader_train_args=dataloader_args,
        dataloader_valid_args=dataloader_args,
        dataloader_test_args=dataloader_args,
    )

    tdm.setup()

    print(f'\n{ids}')
    print(f'\n{kow}')

    banner = '\n'.join((
        '',
        '-' * 20,
        ' IRTM KEEN CLIENT',
        '-' * 20,
        '',
        'variables in scope:',
        '    ids: irt.Dataset',
        '    kow: irt.KeenOpenworld',
        '    tdm: irt.TorchModule',
        '',
        'you can now play around, e.g.:',
        '  dl = tdm.train_dataloader()',
        '  gen = iter(dl)',
        '  next(gen)',
        '',
    ))

    import IPython
    IPython.embed(banner1=banner)


# shared options

_shared_options_mapper = [
    #
    # these are autogenerated by `irtm common ryaml click-arguments`
    #
    click.option('--text-encoder', type=str),
    click.option('--wandb-args--project', type=str),
    click.option('--wandb-args--log-model', type=bool),
    click.option('--trainer-args--gpus', type=int),
    click.option('--trainer-args--fast-dev-run', type=bool),
    click.option('--trainer-args--accumulate-grad-batches', type=int),
    click.option('--trainer-args--check-val-every-n-epoch', type=int),
    click.option('--trainer-args--log-every-n-steps', type=int),
    click.option('--trainer-args--max-epochs', type=int),
    click.option('--checkpoint-args--mode', type=str),
    click.option('--checkpoint-args--monitor', type=str),
    click.option('--checkpoint-args--save-top-k', type=int),
    click.option('--dataset', type=str),
    click.option('--dataloader-train-args--num-workers', type=int),
    click.option('--dataloader-train-args--shuffle', type=bool),
    click.option('--dataloader-train-args--batch-size', type=int),
    click.option('--dataloader-train-args--subbatch-size', type=int),
    click.option('--dataloader-valid-args--num-workers', type=int),
    click.option('--dataloader-valid-args--batch-size', type=int),
    click.option('--dataloader-valid-args--subbatch-size', type=int),
    click.option('--dataloader-test-args--num-workers', type=int),
    click.option('--dataloader-test-args--batch-size', type=int),
    click.option('--dataloader-test-args--subbatch-size', type=int),
    click.option('--early-stopping', type=bool),
    click.option('--early-stopping-args--monitor', type=str),
    click.option('--early-stopping-args--mode', type=str),
    click.option('--early-stopping-args--min-delta', type=float),
    click.option('--early-stopping-args--patience', type=int),
    click.option('--kgc-model', type=str),
    click.option('--optimizer', type=str),
    click.option('--optimizer-args--lr', type=float),
    click.option('--projector-args--input-dims', type=int),
    click.option('--projector-args--output-dims', type=int),
    click.option('--aggregator', type=str),
    click.option('--comparator', type=str),
    click.option('--reductor', type=str),
    click.option('--projector', type=str),
    click.option('--freeze-text-encoder', type=bool),
]


# thanks https://stackoverflow.com/questions/40182157
def _add_options(options):
    def _proxy(fn):
        [option(fn) for option in reversed(options)]
        return fn
    return _proxy


@text.command()
@click.option(
    '--debug', is_flag=True,
    help='only test a model and do not log')
@click.option(
    '-c', '--config', type=str, multiple=True,
    help='one or more configuration files')
@_add_options(_shared_options_mapper)
def train(*, config=None, **kwargs):
    """
    Train a mapper to align embeddings
    """
    trainer.train_from_kwargs(config=config, **kwargs)


@text.command()
@click.option(
    '--debug', is_flag=True,
    help='only test a model and do not log')
@click.option(
    '--path', type=str, required=True,
    help='path to model directory')
@click.option(
    '--checkpoint', type=str, required=True,
    help='path to model checkpoint')
@click.option(
    '-c', '--config', type=str, multiple=True,
    help='one or more configuration files')
@_add_options(_shared_options_mapper)
def resume(**kwargs):
    """
    Resume training of a mapper
    """
    trainer.resume_from_kwargs(**kwargs)


@text.command()
@click.option(
    '--path', type=str, required=True,
    help='path to model directory')
@click.option(
    '--checkpoint', type=str, required=True,
    help='path to model checkpoint')
@click.option(
    '-c', '--config', type=str, multiple=True,
    help='one or more configuration files')
@click.option(
    '--debug', is_flag=True,
    help='run everything fast, do not write anything')
def evaluate(**kwargs):
    """
    Evaluate a mapper on the test split
    """
    evaluator.evaluate_from_kwargs(**kwargs)


@text.command()
@click.option(
    '-c', '--config', type=str, multiple=True,
    help='one or more configuration files')
@click.option(
    '--kgc-model', type=str, required=True,
    help='path to irtm.kgc.keen.Model')
@click.option(
    '--dataset', type=str, required=True,
    help='path to an IRT dataset')
@click.option(
    '--out', type=str, required=True,
    help='where to write the results to')
@click.option(
    '--debug', is_flag=True,
    help='run everything fast, do not write anything')
def evaluate_baseline(**kwargs):
    """
    Evaluate a mapper where all projections are [1., ...]
    """
    evaluator.evaluate_baseline(**kwargs)


@text.command()
@click.option(
    '--root', type=str, required=True)
@click.option(
    '-c', '--config', type=str, multiple=True,
    help='one or more configuration files')
@click.option(
    '--debug', is_flag=True,
    help='run everything fast, do not write anything')
def evaluate_all(**kwargs):
    """
    Run evaluations for all saved checkpoints
    """
    evaluator.evaluate_all(**kwargs)


@text.command()
@click.option(
    '--csv-file', type=str, required=True)
@click.option(
    '-c', '--config', type=str, multiple=True,
    help='one or more configuration files')
@click.option(
    '--only-marked/--all', type=bool, default=False,
    help='whether to evaluate all rows or only those marked "EVAL"')
@click.option(
    '--debug', is_flag=True,
    help='run everything fast, do not write anything')
def evaluate_csv(**kwargs):
    """
    Run evaluations based on a csv file
    """
    evaluator.evaluate_csv(**kwargs)


# ---

@text.command()
@click.option(
    "-c", "--config", type=str, multiple=True, hidden=True,
    help="one or more configuration files",
)
def create_click_arguments(config: List[str]):
    """
    Generate click arguments from yaml files
    """
    dic = ryaml.load(configs=config)
    ryaml.print_click_arguments(dic=dic)
